@page "/movies/details"
@using Microsoft.EntityFrameworkCore
@using MyWebMovieApp.Components.Movies
@inject IDbContextFactory<MyWebMovieApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Movie</h2>
    <hr />
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@movie.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@movie.Description</dd>
            <dt class="col-sm-2">ReleaseDate</dt>
            <dd class="col-sm-10">@movie.ReleaseDate?.ToString("dd-MM-yyyy")</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@movie.Rate</dd>

            @if (!string.IsNullOrEmpty(movie.ImageUrl))
            {
                <dt class="col-sm-2">Image</dt>
                <dd class="col-sm-10">
                    <img src="@movie.ImageUrl" alt="Movie Image" class="img-fluid" />
                </dd>
            }
        </dl>

        <div class="mb-4">
            <h4>Add your rating</h4>
            <EditForm Model="@this" OnValidSubmit="AddRating" FormName="add-rating">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <InputNumber @bind-Value="newRating" min="1" max="10" class="form-control" />
                    <ValidationMessage For="@(() => newRating)" />
                </div>
                <button type="submit" class="btn btn-success">Submit Rating</button>
            </EditForm>

        </div>

        <div>
            <a href="@($"/movies/edit?id={movie.Id}")">Edit</a> |
            <a href="@($"/movies")">Back to List</a>
        </div>
    }
</div>

@code {
    private Movie? movie;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private float newRating { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        movie = await context.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task AddRating()
    {
        if (newRating < 0 || newRating > 10 || movie is null)
            return;

        using var context = DbFactory.CreateDbContext();
        var movieToUpdate = await context.Movie.FirstOrDefaultAsync(m => m.Id == movie.Id);

        if (movieToUpdate is not null)
        {
            var totalRatings = movieToUpdate.NumberOfRatings.Value;
            var currentRate = movieToUpdate.Rate.Value;

            var newAverage = ((currentRate * totalRatings) + newRating) / (totalRatings + 1);

            movieToUpdate.Rate = newAverage;
            movieToUpdate.NumberOfRatings = totalRatings + 1;

            await context.SaveChangesAsync();

            NavigationManager.NavigateTo($"/movies/details?id={movieToUpdate.Id}");
        }
    }
} 