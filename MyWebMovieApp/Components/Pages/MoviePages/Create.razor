@page "/movies/create"
@using Microsoft.EntityFrameworkCore
@using MyWebMovieApp.Components.Movies
@inject IDbContextFactory<MyWebMovieApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Env

@rendermode InteractiveServer
@attribute [StreamRendering]


<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Movie</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Movie" OnValidSubmit="AddMovie" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Movie.Title" class="form-control" /> 
                <ValidationMessage For="() => Movie.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Movie.Description" class="form-control" /> 
                <ValidationMessage For="() => Movie.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="releasedate" class="form-label">ReleaseDate:</label> 
                <InputDate id="releasedate" @bind-Value="Movie.ReleaseDate" class="form-control" /> 
                <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="rate" class="form-label">Rate:</label> 
                <InputNumber id="rate" @bind-Value="Movie.Rate" class="form-control" /> 
                <ValidationMessage For="() => Movie.Rate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="numberofratings" class="form-label">NumberOfRatings:</label> 
                <InputNumber id="numberofratings" @bind-Value="Movie.NumberOfRatings" class="form-control" /> 
                <ValidationMessage For="() => Movie.NumberOfRatings" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="imagefile" class="form-label">Upload Image:</label>
                <InputFile id="imagefile" OnChange="HandleImageUpload" />
                @if (!string.IsNullOrEmpty(Movie.ImageUrl))
                {
                    <div class="mt-2">
                        <img src="@Movie.ImageUrl" alt="Uploaded image" style="max-width: 200px;" />
                    </div>
                }
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/movies">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Movie Movie { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Movie.Add(Movie);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/movies");
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var fileName = Path.GetRandomFileName() + Path.GetExtension(file.Name);

        var imageDirectory = Path.Combine(Env.WebRootPath, "images");
        if (!Directory.Exists(imageDirectory))
        {
            Directory.CreateDirectory(imageDirectory);
        }

        var filePath = Path.Combine(imageDirectory, fileName);

        await using var fileStream = File.Create(filePath);
        await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(fileStream);

        // Set relative URL (without "wwwroot")
        Movie.ImageUrl = $"images/{fileName}";
    }


}
